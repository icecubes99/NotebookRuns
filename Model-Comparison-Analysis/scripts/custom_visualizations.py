"""
Custom Visualizations for Model Comparison
Creates specific comparison charts for accuracy and detailed heatmaps
Blue color scheme
"""

import pandas as pd
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from matplotlib.colors import LinearSegmentedColormap

# Set style with blue color scheme
sns.set_style("whitegrid")
sns.set_palette("Blues_d")

# Create custom three-color gradient: white -> light blue -> dark blue
colors_gradient = ['#FFFFFF', '#5DADE2', '#0d2136']  # White -> Light blue -> Very dark
n_bins = 100
cmap_custom = LinearSegmentedColormap.from_list('custom_blues', colors_gradient, N=n_bins)

def load_data():
    """Load model comparison data from CSV"""
    # Read from the CSV file generated by model_comparison.py
    csv_path = '../results/model_comparison_summary.csv'
    df = pd.read_csv(csv_path)
    
    # Rename 'Model' column if it has a different name
    if 'Unnamed: 0' in df.columns:
        df = df.rename(columns={'Unnamed: 0': 'Model'})
    
    return df

def plot_accuracy_comparison():
    """
    Create separate bar charts for sentiment and polarization accuracy
    """
    df = load_data()
    
    # Blue color scheme - different shades of blue
    colors = ['#1f4788', '#2874A6', '#5DADE2']  # Dark blue, medium blue, light blue
    
    # Sentiment Accuracy
    fig1, ax1 = plt.subplots(figsize=(10, 7))
    bars1 = ax1.bar(df['Model'], df['sent_acc'], color=colors, alpha=0.85, 
                    edgecolor='#0d2136', linewidth=2)
    ax1.set_ylabel('Accuracy Score', fontweight='bold', fontsize=13)
    ax1.set_xlabel('Models', fontweight='bold', fontsize=13)
    ax1.set_title('Sentiment Analysis Accuracy Comparison', 
                  fontweight='bold', fontsize=16, pad=20)
    ax1.set_ylim([0.0, 1.0])
    ax1.grid(axis='y', alpha=0.4, linestyle='--', color='#5DADE2')
    
    # Add percentage labels only
    for bar in bars1:
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height + 0.02,
               f'{height*100:.2f}%',
               ha='center', va='bottom', fontsize=13, fontweight='bold',
               color='#0d2136')
    
    plt.tight_layout()
    plt.savefig('../visualizations/sentiment_accuracy_comparison.png', 
                dpi=300, bbox_inches='tight', facecolor='white')
    print("✓ Saved: visualizations/sentiment_accuracy_comparison.png")
    plt.close()
    
    # Polarization Accuracy
    fig2, ax2 = plt.subplots(figsize=(10, 7))
    bars2 = ax2.bar(df['Model'], df['pol_acc'], color=colors, alpha=0.85,
                    edgecolor='#0d2136', linewidth=2)
    ax2.set_ylabel('Accuracy Score', fontweight='bold', fontsize=13)
    ax2.set_xlabel('Models', fontweight='bold', fontsize=13)
    ax2.set_title('Polarization Detection Accuracy Comparison', 
                  fontweight='bold', fontsize=16, pad=20)
    ax2.set_ylim([0.0, 1.0])
    ax2.grid(axis='y', alpha=0.4, linestyle='--', color='#5DADE2')
    
    # Add percentage labels only
    for bar in bars2:
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height + 0.02,
               f'{height*100:.2f}%',
               ha='center', va='bottom', fontsize=13, fontweight='bold',
               color='#0d2136')
    
    plt.tight_layout()
    plt.savefig('../visualizations/polarization_accuracy_comparison.png', 
                dpi=300, bbox_inches='tight', facecolor='white')
    print("✓ Saved: visualizations/polarization_accuracy_comparison.png")
    plt.close()

def plot_sentiment_heatmap():
    """
    Create a detailed heatmap for sentiment metrics only - Blue color scheme
    """
    df = load_data()
    
    # Prepare sentiment data
    sentiment_data = df[['Model', 'sent_acc', 'sent_prec', 'sent_rec', 'sent_f1']].set_index('Model')
    sentiment_data.columns = ['Accuracy', 'Precision', 'Recall', 'F1-Score']
    
    # Convert to percentage for display
    sentiment_data_pct = sentiment_data * 100
    
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # Create annotations with percentage format
    annot_data = sentiment_data_pct.map(lambda x: f'{x:.2f}%')
    
    # Create heatmap with custom three-color gradient
    sns.heatmap(sentiment_data.T, annot=annot_data.T, fmt='', cmap=cmap_custom, 
               vmin=0.85, vmax=0.92, ax=ax,
               cbar_kws={'label': 'Percentage'}, linewidths=2.5, linecolor='white',
               annot_kws={'fontsize': 12, 'fontweight': 'bold'})
    
    ax.set_title('Sentiment Analysis Metrics Heatmap', 
                fontsize=16, fontweight='bold', pad=20, color='#0d2136')
    ax.set_xlabel('Models', fontsize=13, fontweight='bold', color='#0d2136')
    ax.set_ylabel('Metrics', fontsize=13, fontweight='bold', color='#0d2136')
    ax.set_xticklabels(ax.get_xticklabels(), fontsize=12, fontweight='bold', color='#1f4788')
    ax.set_yticklabels(ax.get_yticklabels(), fontsize=12, fontweight='bold', 
                       rotation=0, color='#1f4788')
    
    plt.tight_layout()
    plt.savefig('../visualizations/sentiment_metrics_heatmap.png', 
                dpi=300, bbox_inches='tight', facecolor='white')
    print("✓ Saved: visualizations/sentiment_metrics_heatmap.png")
    plt.close()

def plot_polarization_heatmap():
    """
    Create a detailed heatmap for polarization metrics only - Blue color scheme
    """
    df = load_data()
    
    # Prepare polarization data
    pol_data = df[['Model', 'pol_acc', 'pol_prec', 'pol_rec', 'pol_f1']].set_index('Model')
    pol_data.columns = ['Accuracy', 'Precision', 'Recall', 'F1-Score']
    
    # Convert to percentage for display
    pol_data_pct = pol_data * 100
    
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # Create annotations with percentage format
    annot_data = pol_data_pct.map(lambda x: f'{x:.2f}%')
    
    # Create heatmap with custom three-color gradient
    sns.heatmap(pol_data.T, annot=annot_data.T, fmt='', cmap=cmap_custom, 
               vmin=0.85, vmax=0.92, ax=ax,
               cbar_kws={'label': 'Percentage'}, linewidths=2.5, linecolor='white',
               annot_kws={'fontsize': 12, 'fontweight': 'bold'})
    
    ax.set_title('Polarization Detection Metrics Heatmap', 
                fontsize=16, fontweight='bold', pad=20, color='#0d2136')
    ax.set_xlabel('Models', fontsize=13, fontweight='bold', color='#0d2136')
    ax.set_ylabel('Metrics', fontsize=13, fontweight='bold', color='#0d2136')
    ax.set_xticklabels(ax.get_xticklabels(), fontsize=12, fontweight='bold', color='#1f4788')
    ax.set_yticklabels(ax.get_yticklabels(), fontsize=12, fontweight='bold', 
                       rotation=0, color='#1f4788')
    
    plt.tight_layout()
    plt.savefig('../visualizations/polarization_metrics_heatmap.png', 
                dpi=300, bbox_inches='tight', facecolor='white')
    print("✓ Saved: visualizations/polarization_metrics_heatmap.png")
    plt.close()

def plot_sentiment_precision_recall_f1():
    """
    Create bar charts comparing precision, recall, and F1 for sentiment across models
    """
    df = load_data()
    
    # Blue color scheme
    colors = ['#1f4788', '#2874A6', '#5DADE2']
    
    fig, axes = plt.subplots(1, 3, figsize=(18, 6))
    
    # Precision
    bars1 = axes[0].bar(df['Model'], df['sent_prec'], color=colors, alpha=0.85,
                        edgecolor='#0d2136', linewidth=2)
    axes[0].set_ylabel('Score', fontweight='bold', fontsize=13)
    axes[0].set_xlabel('Models', fontweight='bold', fontsize=13)
    axes[0].set_title('Sentiment Precision', fontweight='bold', fontsize=14)
    axes[0].set_ylim([0.0, 1.0])
    axes[0].grid(axis='y', alpha=0.4, linestyle='--', color='#5DADE2')
    for bar in bars1:
        height = bar.get_height()
        axes[0].text(bar.get_x() + bar.get_width()/2., height + 0.02,
                    f'{height*100:.2f}%', ha='center', va='bottom',
                    fontsize=11, fontweight='bold', color='#0d2136')
    
    # Recall
    bars2 = axes[1].bar(df['Model'], df['sent_rec'], color=colors, alpha=0.85,
                        edgecolor='#0d2136', linewidth=2)
    axes[1].set_ylabel('Score', fontweight='bold', fontsize=13)
    axes[1].set_xlabel('Models', fontweight='bold', fontsize=13)
    axes[1].set_title('Sentiment Recall', fontweight='bold', fontsize=14)
    axes[1].set_ylim([0.0, 1.0])
    axes[1].grid(axis='y', alpha=0.4, linestyle='--', color='#5DADE2')
    for bar in bars2:
        height = bar.get_height()
        axes[1].text(bar.get_x() + bar.get_width()/2., height + 0.02,
                    f'{height*100:.2f}%', ha='center', va='bottom',
                    fontsize=11, fontweight='bold', color='#0d2136')
    
    # F1
    bars3 = axes[2].bar(df['Model'], df['sent_f1'], color=colors, alpha=0.85,
                        edgecolor='#0d2136', linewidth=2)
    axes[2].set_ylabel('Score', fontweight='bold', fontsize=13)
    axes[2].set_xlabel('Models', fontweight='bold', fontsize=13)
    axes[2].set_title('Sentiment F1-Score', fontweight='bold', fontsize=14)
    axes[2].set_ylim([0.0, 1.0])
    axes[2].grid(axis='y', alpha=0.4, linestyle='--', color='#5DADE2')
    for bar in bars3:
        height = bar.get_height()
        axes[2].text(bar.get_x() + bar.get_width()/2., height + 0.02,
                    f'{height*100:.2f}%', ha='center', va='bottom',
                    fontsize=11, fontweight='bold', color='#0d2136')
    
    plt.suptitle('Sentiment Analysis: Precision, Recall & F1-Score Comparison',
                fontsize=16, fontweight='bold', y=1.02)
    plt.tight_layout()
    plt.savefig('../visualizations/sentiment_precision_recall_f1_comparison.png',
                dpi=300, bbox_inches='tight', facecolor='white')
    print("✓ Saved: visualizations/sentiment_precision_recall_f1_comparison.png")
    plt.close()

def plot_polarization_precision_recall_f1():
    """
    Create bar charts comparing precision, recall, and F1 for polarization across models
    """
    df = load_data()
    
    # Blue color scheme
    colors = ['#1f4788', '#2874A6', '#5DADE2']
    
    fig, axes = plt.subplots(1, 3, figsize=(18, 6))
    
    # Precision
    bars1 = axes[0].bar(df['Model'], df['pol_prec'], color=colors, alpha=0.85,
                        edgecolor='#0d2136', linewidth=2)
    axes[0].set_ylabel('Score', fontweight='bold', fontsize=13)
    axes[0].set_xlabel('Models', fontweight='bold', fontsize=13)
    axes[0].set_title('Polarization Precision', fontweight='bold', fontsize=14)
    axes[0].set_ylim([0.0, 1.0])
    axes[0].grid(axis='y', alpha=0.4, linestyle='--', color='#5DADE2')
    for bar in bars1:
        height = bar.get_height()
        axes[0].text(bar.get_x() + bar.get_width()/2., height + 0.02,
                    f'{height*100:.2f}%', ha='center', va='bottom',
                    fontsize=11, fontweight='bold', color='#0d2136')
    
    # Recall
    bars2 = axes[1].bar(df['Model'], df['pol_rec'], color=colors, alpha=0.85,
                        edgecolor='#0d2136', linewidth=2)
    axes[1].set_ylabel('Score', fontweight='bold', fontsize=13)
    axes[1].set_xlabel('Models', fontweight='bold', fontsize=13)
    axes[1].set_title('Polarization Recall', fontweight='bold', fontsize=14)
    axes[1].set_ylim([0.0, 1.0])
    axes[1].grid(axis='y', alpha=0.4, linestyle='--', color='#5DADE2')
    for bar in bars2:
        height = bar.get_height()
        axes[1].text(bar.get_x() + bar.get_width()/2., height + 0.02,
                    f'{height*100:.2f}%', ha='center', va='bottom',
                    fontsize=11, fontweight='bold', color='#0d2136')
    
    # F1
    bars3 = axes[2].bar(df['Model'], df['pol_f1'], color=colors, alpha=0.85,
                        edgecolor='#0d2136', linewidth=2)
    axes[2].set_ylabel('Score', fontweight='bold', fontsize=13)
    axes[2].set_xlabel('Models', fontweight='bold', fontsize=13)
    axes[2].set_title('Polarization F1-Score', fontweight='bold', fontsize=14)
    axes[2].set_ylim([0.0, 1.0])
    axes[2].grid(axis='y', alpha=0.4, linestyle='--', color='#5DADE2')
    for bar in bars3:
        height = bar.get_height()
        axes[2].text(bar.get_x() + bar.get_width()/2., height + 0.02,
                    f'{height*100:.2f}%', ha='center', va='bottom',
                    fontsize=11, fontweight='bold', color='#0d2136')
    
    plt.suptitle('Polarization Detection: Precision, Recall & F1-Score Comparison',
                fontsize=16, fontweight='bold', y=1.02)
    plt.tight_layout()
    plt.savefig('../visualizations/polarization_precision_recall_f1_comparison.png',
                dpi=300, bbox_inches='tight', facecolor='white')
    print("✓ Saved: visualizations/polarization_precision_recall_f1_comparison.png")
    plt.close()

def main():
    """Generate all custom visualizations"""
    print("\n" + "="*80)
    print("🎨 GENERATING CUSTOM VISUALIZATIONS")
    print("="*80)
    print("\n📊 Creating visualizations...")
    print("-" * 80)
    
    plot_accuracy_comparison()
    plot_sentiment_heatmap()
    plot_polarization_heatmap()
    plot_sentiment_precision_recall_f1()
    plot_polarization_precision_recall_f1()
    
    print("\n✅ All custom visualizations generated successfully!")
    print("="*80 + "\n")

if __name__ == "__main__":
    main()
